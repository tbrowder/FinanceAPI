#!/usr/bin/env raku

use JSON::Fast <pretty sorted-keys>;
use JSON::Path;

use FinanceAPI;
use FinanceAPI::Vars;

my $apif = "t/api/yh-finance-api-specification.json";

my $debug     = 0;
my $force     = 0;
my @symbols;

my @modules;
my $summary   = 0;
my $daily     = 0;
my $dividends = 0;
my $gains     = 0;

my $increment = 0;
my $range     = 0;
my $lang      = 0;
my $region    = 0;
if not @*ARGS {
    print qq:to/HERE/;
    Usage: {$*PROGRAM.basename} <mode> <options...> [debug]

    With <mode> and <options...>, queries the FinanceAPI for
    results to be processed.

    Modes:
       da[ily]     - shows daily prices for a security
       di[vidends] - shows dividends for a security
       su[mmary]   - cycles 10 modules at a time to display data for a security

    Options:
       sy[mbols]=s1,s2,..,sN # default is JABAX
       mo[dules]=m1,m2,..,sN # see README
       force
       increment=X
       range=X
       lang=X
       region=X

    HERE
    exit;
}
for @*ARGS {
    when /^ :i f/ {
        ++$force;
    }
    when /^ :i sy [m|mb|mbo|mbol|mbols]? '=' (\S+) / {
        # a list of security symbols
        my $s = ~$0;
        $s ~~ s:g/','/ /;
        @symbols = $s.words;
    }
    when /^ :i mo [d|du|dul|dule|dules]? '=' (\S+) / {
        # a list of modules for api use
        my $s = ~$0;
        $s ~~ s:g/','/ /;
        @modules = $s.words;
    }
    when /^ :i su [m|mm|mma|mmar|mmary]? / {
        # TODO update after testing
        ++$summary;
    }
    when /^ :i di [div|divi|divid|divide|dividen|dividend|dividends]? / {
        ++$dividends;
    }
    when /^ :i da [dai|dail|daily]? / {
        ++$daily;
    }
    when /^ :i ga [gai|gain|gains]?  / {
        ++$gains;
    }
    when /^ :i d/ {
        ++$debug;
    }
    default {
        say qq:to/HERE/;
        FATAL: Unknown arg '$_', exiting...";
        HERE
    }
}

if @symbols {
    say "found \@symbols..." if $debug;
    while @symbols {
    }
}

if $daily {
    say "Daily...";
    my @symbols = <jabax jagix xon mrk>; # Exxon Merck
    my $res = path-v8FinanceSpark @symbols, :$debug; # max of 10 symbols
    # save to a JSON file
    my $fo = "Daily-FinanceSpark-multi.json";
    if $fo.IO.e {
        if not $force {
            say "WARNING: File '$fo' exists, aborting...";
            exit;
        }
        elsif $force {
            say "NOTE: File '$fo' exists, overwriting...";
        }
    }
    my $fh = open $fo, :w;
    # $res is a JSON string
    # pretty print it
    my %h = from-json $res;
    my $jstr = to-json %h;
    $fh.say: $jstr;
    $fh.close;
    say "See output file '$fo'";
}
elsif $dividends {
    say "Dividends...";
    #my @symbols = <jabax jagix xon mrk>; # Exxon Merck
    my $ticker = "jabax"; # a single security 
    # TODO add :@comparisons
    # TODO handle multi-tickers in individual calls
    my $res = path-v8FinanceChart $ticker, :$debug; # max of 10 symbols
    # save to a JSON file
    my $fo = "FinanceChart-multi.json";
    if $fo.IO.e {
        if not $force {
            say "WARNING: File '$fo' exists, aborting...";
            exit;
        }
        elsif $force {
            say "NOTE: File '$fo' exists, overwriting...";
        }
    }
    my $fh = open $fo, :w;
    # $res is a JSON string
    # pretty print it
    my %h = from-json $res;
    my $jstr = to-json %h;
    $fh.say: $jstr;
    $fh.close;
    say "See output file '$fo'";
}
elsif $gains {
    say "Gains...";
}
elsif $summary {
    say "Summary...";
    my @modules = %modules.keys.sort;

    my @res;
    while @modules.elems {
        my @m;
        if @modules.elems > 9 {
            @m.push(@modules.shift) for (0..^10);
        }
        else {
            @m.push(@modules.shift) while @modules.elems;
        }
        #my $res = v11FinanceQuoteSummary("jabax", :modules(@m), :$debug);
        my $res = path-v11FinanceQuoteSummary "jabax", :modules(@m), :$debug;
        @res.push: $res;
    }

    my $fo = "FullTestquoteSummary.json";
    if $fo.IO.e {
        if not $force {
            say "WARNING: File '$fo' exists, aborting...";
            exit;
        }
        elsif $force {
            say "NOTE: File '$fo' exists, overwriting...";
        }
    }
    my $fh = open $fo, :w;
    for @res -> $res {
        # $res is a JSON string
        # pretty print it
        my %h = from-json $res;
        my $jstr = to-json %h;
        $fh.say: $jstr;
        $fh.close;
    }
    say "See output file '$fo'";
}
